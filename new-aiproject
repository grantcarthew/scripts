#!/usr/bin/env bash
# Creates a new AI project document

# Environment setup
# -----------------------------------------------------------------------------
set -o pipefail # set -o errexit hides errors, don't use it
[[ ${DEBUG-} ]] && set -o xtrace
SCRIPT_DIR="$(cd "${BASH_SOURCE[0]%/*}" || exit 1; pwd)"
[[ ":${PATH}:" != *:"${SCRIPT_DIR}":* ]] && export PATH="${SCRIPT_DIR}:${PATH}"
source "${SCRIPT_DIR}/bash_modules/terminal.sh"
source "${SCRIPT_DIR}/bash_modules/ai.sh"
[[ -z ${BASH_MODULES_DIR-} ]] && echo "ERROR: terminal.sh module missing" && exit 1

function print_usage() {
  cat <<EOF
Usage: $(basename "$0")

Interactive script to generate a new PROJECT.md file

Options:
  -h, --help        Show this help message and exit
EOF
}

if [[ "${1-}" == "-h" || "${1-}" == "--help" ]]; then
  print_usage
  exit 0
fi

if [[ $# -gt 0 ]]; then
  log_error "This script does not accept arguments. Run without arguments for interactive mode."
  print_usage
  exit 1
fi

function ctrlc_trap() {
  log_newline
  log_warning "Script interrupted. Exiting."
  exit 130
}
trap ctrlc_trap SIGINT

# Interactive prompts
# -----------------------------------------------------------------------------
declare use_spec_template=false
declare project_name=""
declare project_overview=""

log_title "New AI Project Generator"

# Interactive prompts
# -----------------------------------------------------------------------------
log_heading "Project Type Selection"
log_message "1) Assignment"
log_message "2) Specification"
read -r -p "Select project type (1-2): " project_type_choice

while [[ "${project_type_choice}" != "1" && "${project_type_choice}" != "2" ]]; do
  log_warning "Invalid selection '${project_type_choice}'. Please enter 1 or 2."
  read -r -p "Select project type (1-2): " project_type_choice
done

case "${project_type_choice}" in
  2)
    use_spec_template=true
    log_message "Selected: Specification template"
    ;;
  1)
    use_spec_template=false
    log_message "Selected: Assignment template"
    ;;
esac

log_heading "Project Details"
read -r -p "Enter project name: " project_name
while [[ -z "${project_name}" ]]; do
  log_warning "Project name cannot be empty"
  read -r -p "Enter project name: " project_name
done

read -r -p "Enter project overview: " project_overview
if [[ -z "${project_overview}" ]]; then
  project_overview="A brief overview of the project."
  log_message "Using default overview: '${project_overview}'"
fi

# Dependency Checks
# -----------------------------------------------------------------------------
if ! command -v mo >/dev/null; then
  log_warning "Command 'mo' not found. Installing to '${HOME}/bin'."
  if [[ ! -d "${HOME}/bin" ]]; then
    mkdir -p "${HOME}/bin"
  fi
  curl -sSL https://raw.githubusercontent.com/tests-always-included/mo/master/mo -o "${HOME}/bin/mo"
  chmod +x "${HOME}/bin/mo"
  export PATH="${HOME}/bin:${PATH}"
  log_success "Installed 'mo' successfully."
fi

function get_terminal_type() {
  if [[ -n "${TERM_PROGRAM}" ]]; then
    printf "%s" "${TERM_PROGRAM}"
  elif [[ -n "${TERM}" ]]; then
    printf "%s" "${TERM}"
  else
    printf "unknown"
  fi
}

# Main Logic
# -----------------------------------------------------------------------------
log_heading "Gathering System Information"

declare operating_system
operating_system=$(uname -s)
declare package_manager
declare cli_tools
declare terminal_type
terminal_type=$(get_terminal_type)

case "${operating_system}" in
  Darwin)
    package_manager="brew"
    log_message "Detected macOS. Using 'brew' for package management."
    cli_tools_leaves=$(brew leaves | paste -sd, | fold -w 80)
    cli_tools_cask=$(brew list --cask | paste -sd, | fold -w 80)
    cli_tools="${cli_tools_leaves}
${cli_tools_cask}"
    ;;
  Linux)
    package_manager="pacman or apt"
    log_message "Detected Linux. Using placeholder values."
    cli_tools="Placeholder for Linux CLI tools"
    ;;
  *)
    log_error "Unsupported operating system: '${operating_system}'"
    exit 1
    ;;
esac

declare output_file="PROJECT.md"
if [[ "${use_spec_template}" == true ]]; then
  log_heading "Generating PROJECT.md based on the specifications template"
  mo_template_file="${SCRIPT_DIR}/new-aiproject-spec-template.md"
else
  log_heading "Generating PROJECT.md based on the assignment template"
  mo_template_file="${SCRIPT_DIR}/new-aiproject-assignment-template.md"
fi

export PROJECT_NAME="${project_name}"
export PROJECT_OVERVIEW="${project_overview}"
export OPERATING_SYSTEM="${operating_system}"
export TERMINAL_TYPE="${terminal_type}"
export PACKAGE_MANAGER="${package_manager}"
export CLI_TOOLS="${cli_tools}"

if [[ ! -f "${mo_template_file}" ]]; then
    log_error "Template file not found: '${mo_template_file}'"
    exit 1
fi

log_message "Substituting variables in '${mo_template_file}'"
mo "${mo_template_file}" > "${output_file}"

log_success "Successfully created '${output_file}'"

eval "$(ai_get_command alpha mid "${SCRIPT_DIR}/new-aiproject-design-prompt.md" "Read the @PROJECT.md file and help me design the new project document.")"
