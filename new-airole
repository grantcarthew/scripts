#!/usr/bin/env bash
# Generates a new AI role prompt using the role metaprompt

# Environment setup
# -----------------------------------------------------------------------------
set -o pipefail # set -o errexit hides errors, don't use it
[[ ${DEBUG-} ]] && set -o xtrace
SCRIPT_DIR="$(cd "${BASH_SOURCE[0]%/*}" || exit 1; pwd)"
[[ ":${PATH}:" != *:"${SCRIPT_DIR}":* ]] && export PATH="${SCRIPT_DIR}:${PATH}"
source "${SCRIPT_DIR}/bash_modules/terminal.sh"
source "${SCRIPT_DIR}/bash_modules/desktop.sh"
source "${SCRIPT_DIR}/bash_modules/ai.sh"
[[ -z ${BASH_MODULES_DIR-} ]] && echo "ERROR: terminal.sh module missing" && exit 1

function print_usage() {
  cat <<EOF
Usage: $(basename "$0") [-c|--clipboard] [-h|--help] [role_request...]

Generates a new AI role prompt using the role metaprompt.
Gets user input for AI role request, sends to AI, saves result or copies to clipboard.

Repository: https://github.com/grantcarthew/scripts/tree/main

Dependencies:
  AI service         One of claude, gemini, or aichat (configured via set-aiconfig)

Arguments:
  role_request       The AI role to create (e.g., 'Python expert', 'DevOps specialist')
                     If not provided, will prompt for input

Optional arguments:
  -c, --clipboard    Copy the generated role to clipboard instead of saving to file
  -h, --help         Show this help message and exit
EOF
}

declare copy_to_clipboard=false
declare -a role_args=()

while [[ $# -gt 0 ]]; do
  case "$1" in
    -c|--clipboard)
      copy_to_clipboard=true
      shift
      ;;
    -h|--help)
      print_usage
      exit 0
      ;;
    -*)
      log_error "ERROR: Unknown option '${1}'"
      print_usage
      exit 1
      ;;
    *)
      role_args+=("$1")
      shift
      ;;
  esac
done

function ctrlc_trap() {
  log_newline
  log_warning "Script interrupted. Exiting."
  exit 130
}
trap ctrlc_trap SIGINT

# Title and Dependency Checks
# -----------------------------------------------------------------------------
log_title "New AI Role Prompt Generator"

# No external dependencies needed since we're using local files

# Check if AI service is configured
if ! ai_get_command "alpha" "fast" >/dev/null 2>&1; then
  log_error "ERROR: No AI service configured. Run 'set-aiconfig' to configure AI services."
  exit 1
fi

# Report Operational Values
# -----------------------------------------------------------------------------
log_heading "Operational Values"

declare local_file_path="${SCRIPT_DIR}/ai/metaprompts/role.md"
declare output_file="ROLE.md"

log_message "$(
  cat <<EOF
      copy_to_clipboard: '${copy_to_clipboard}'
         local_file_path: '${local_file_path}'
            output_file: '${output_file}'
EOF
)"

# User Input
# -----------------------------------------------------------------------------
log_heading "AI Role Request"

if [[ ${#role_args[@]} -gt 0 ]]; then
  user_role_request="${role_args[*]}"
  log_message "Using role request from command line: '${user_role_request}'"
else
  echo "What AI role do you want to create? (e.g., 'Python expert', 'DevOps specialist')" >&2
  read -r user_role_request
  while [[ -z "${user_role_request}" ]]; do
    log_warning "Role request cannot be empty"
    echo "What AI role do you want to create?" >&2
    read -r user_role_request
  done
  log_message "Creating AI role for: '${user_role_request}'"
fi

# Load Role Metaprompt
# -----------------------------------------------------------------------------
log_heading "Loading Role Metaprompt"

if [[ ! -f "${local_file_path}" ]]; then
  log_error "ERROR: Metaprompt file not found at '${local_file_path}'"
  exit 1
fi

log_message "Loading metaprompt from local file"
metaprompt_content="$(cat "${local_file_path}")"

if [[ -z "${metaprompt_content}" ]]; then
  log_error "ERROR: Failed to read metaprompt from '${local_file_path}'"
  exit 1
fi

log_success "Metaprompt loaded successfully"

# Generate AI Role
# -----------------------------------------------------------------------------
log_heading "Generating AI Role"

combined_prompt="${metaprompt_content}

## User Request

Please create an AI role prompt for: ${user_role_request}"

log_message "Sending request to AI service..."

ai_command=$(ai_get_command "alpha" "mid" "" "${combined_prompt}")
ai_response=$(eval "${ai_command}")

if [[ -z "${ai_response}" ]]; then
  log_error "ERROR: No response received from AI service"
  exit 1
fi

log_success "AI role generated successfully"

# Output Result
# -----------------------------------------------------------------------------
log_heading "Output Result"

if [[ "${copy_to_clipboard}" == true ]]; then
  send_to_clipboard "${ai_response}"
  log_success "AI role copied to clipboard!"
else
  echo "${ai_response}" > "${output_file}"
  log_success "AI role saved to '${output_file}'"

  # Open the file for editing
  if command -v nvim >/dev/null; then
    nvim "${output_file}"
  elif command -v vim >/dev/null; then
    vim "${output_file}"
  elif command -v nano >/dev/null; then
    nano "${output_file}"
  fi
fi

log_done
