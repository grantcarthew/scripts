#!/usr/bin/env bash
# Gets a script setting or lists all settings

# Environment setup
# -----------------------------------------------------------------------------
set -o pipefail # set -o errexit hides errors, don't use it
[[ ${DEBUG-} ]] && set -o xtrace
SCRIPT_DIR="$(cd "${BASH_SOURCE[0]%/*}" || exit 1; pwd)"
[[ ":${PATH}:" != *:"${SCRIPT_DIR}":* ]] && export PATH="${SCRIPT_DIR}:${PATH}"
source "${SCRIPT_DIR}/bash_modules/terminal.sh"
source "${SCRIPT_DIR}/bash_modules/settings.sh"
[[ -z ${BASH_MODULES_DIR-} ]] && echo "ERROR: terminal.sh module missing" && exit 1

function print_usage() {
  cat <<EOF
Usage: $(basename "$0") [key]

Lists all script settings or returns a specific key/value pair.

Dependencies:
  rg                 RipGrep recursively searches directories for a regex pattern

Optional arguments:
  key                The specific setting key to retrieve
  -h, --help         Show this help message and exit
EOF
}

if [[ $# -gt 1 || "${1}" == "-h" || "${1}" == "--help" ]]; then
  print_usage
  exit 1
fi

# Dependency Checks
# -----------------------------------------------------------------------------
dependencies=(rg)
for cmd in "${dependencies[@]}"; do
  if ! command -v "${cmd}" >/dev/null; then
    log_error "ERROR: Missing dependency - '${cmd}'"
    exit 1
  fi
done

# Main Logic
# -----------------------------------------------------------------------------
log_title "Get Script Setting"
log_message "Source: $(settings_get_path)"

declare key="${1}"

if [[ -n "${key}" ]]; then
  declare value
  value="$(settings_get "${key}")"

  if [[ -n "${value}" ]]; then
    log_newline
    printf '%s="%s"\n' "${key}" "${value}"
    exit 0
  fi

  log_error "Key '${key}' not found in settings"
  exit 1
fi

log_message "Listing all settings:"
log_newline
settings_list
