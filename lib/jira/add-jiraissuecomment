#!/usr/bin/env bash

# Environment setup
set -o pipefail
[[ ${DEBUG-} ]] && set -o xtrace
SCRIPT_DIR="$(cd "${BASH_SOURCE[0]%/*}" || exit 1; pwd)"
[[ ":${PATH}:" != *:"${SCRIPT_DIR}":* ]] && export PATH="${SCRIPT_DIR}:${PATH}"
source "${SCRIPT_DIR}/../../bash_modules/terminal.sh"
[[ -z ${BASH_MODULES_DIR-} ]] && echo "ERROR: terminal.sh module missing" && exit 1
source "${BASH_MODULES_DIR}/settings.sh"

function print_usage() {
  cat <<EOF
Usage: $(basename "$0") <ISSUE-KEY> [COMMENT] [options]

Add a comment to a Jira issue

Dependencies:
  jira                   The jira CLI tool

Required arguments:
  ISSUE-KEY              Issue key to comment on (e.g., GCP-479)

Optional arguments:
  COMMENT                Comment text (if not provided, will prompt)
  --template FILE        Load comment from template file
  --internal             Make comment internal
  --web                  Open issue in browser after adding comment
  --no-input             Disable interactive prompts
  -h, --help             Show this help message and exit

Examples:
  $(basename "$0") GCP-479                     # Interactive comment
  $(basename "$0") GCP-479 "Fixed the issue"  # Direct comment
  $(basename "$0") GCP-479 --template comment.md  # From template
EOF
}

function ctrlc_trap() {
  log_newline
  log_warning "Script interrupted. Exiting."
  exit 130
}
trap ctrlc_trap SIGINT

# Parse arguments
if [[ $# -lt 1 || "${1}" == "-h" || "${1}" == "--help" ]]; then
  print_usage
  exit 1
fi

declare issue_key="$1"
shift

declare comment=""
declare template=""
declare internal=""
declare web_flag=""
declare no_input=""

# Check if second argument is comment text (doesn't start with -)
if [[ $# -gt 0 && ! "$1" =~ ^- ]]; then
  comment="$1"
  shift
fi

while [[ $# -gt 0 ]]; do
  case $1 in
    --template)
      template="$2"
      shift 2
      ;;
    --internal)
      internal="--internal"
      shift
      ;;
    --web)
      web_flag="--web"
      shift
      ;;
    --no-input)
      no_input="--no-input"
      shift
      ;;
    *)
      log_error "Unknown option: $1"
      print_usage
      exit 1
      ;;
  esac
done

# Title and Dependency Checks
log_title "Add Jira Issue Comment"

dependencies=(jira)
for cmd in "${dependencies[@]}"; do
    if ! command -v "${cmd}" >/dev/null; then
        log_error "ERROR: Missing dependency - '${cmd}'"
        exit 1
    fi
done

# Get project setting
jira_project=$(settings_get "JIRA_DEFAULT_PROJECT")

# Interactive comment input if not provided
if [[ -z "${comment}" && -z "${template}" && -z "${no_input}" ]]; then
  log_heading "Comment Input"
  log_message "Enter comment text (press Ctrl+D when done):"
  comment=$(cat)

  if [[ -z "${comment}" ]]; then
    log_failure "No comment provided"
    exit 1
  fi
fi

# Report Operational Values
log_heading "Comment Details"
log_message "$(
  cat <<EOF
   Issue Key: '${issue_key}'
     Comment: '${comment:0:50}$([[ ${#comment} -gt 50 ]] && echo "...")'
    Template: '${template}'
    Internal: '${internal:+Yes}'
EOF
)"

# Validation - check if issue exists
validation_cmd=(jira issue view "${issue_key}" --plain)
if [[ -n "${jira_project}" ]]; then
  validation_cmd+=("--project" "${jira_project}")
fi
if ! "${validation_cmd[@]}" > /dev/null 2>&1; then
  log_failure "Could not access issue ${issue_key}"
  exit 1
fi

# Build command
cmd=(jira issue comment add "${issue_key}")

if [[ -n "${jira_project}" ]]; then
  cmd+=("--project" "${jira_project}")
fi

if [[ -n "${comment}" ]]; then
  cmd+=("${comment}")
fi

if [[ -n "${template}" ]]; then
  cmd+=(--template "${template}")
fi

if [[ -n "${internal}" ]]; then
  cmd+=("${internal}")
fi

if [[ -n "${web_flag}" ]]; then
  cmd+=("${web_flag}")
fi

# Always add --no-input when comment is provided to avoid interactive prompts
if [[ -n "${no_input}" || -n "${comment}" ]]; then
  cmd+=("--no-input")
fi

# Main Logic
log_heading "Adding Comment"
log_message "Executing: ${cmd[*]}"

if "${cmd[@]}"; then
  log_success "Comment added successfully to ${issue_key}"
else
  log_failure "Failed to add comment"
  exit 1
fi
