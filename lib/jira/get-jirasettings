#!/usr/bin/env bash

# Environment setup
set -o pipefail
[[ ${DEBUG-} ]] && set -o xtrace
SCRIPT_DIR="$(cd "${BASH_SOURCE[0]%/*}" || exit 1; pwd)"
[[ ":${PATH}:" != *:"${SCRIPT_DIR}":* ]] && export PATH="${SCRIPT_DIR}:${PATH}"
source "${SCRIPT_DIR}/../../bash_modules/terminal.sh"
[[ -z ${BASH_MODULES_DIR-} ]] && echo "ERROR: terminal.sh module missing" && exit 1
source "${BASH_MODULES_DIR}/settings.sh"

function print_usage() {
  cat <<EOF
Usage: $(basename "$0") [options]

Display current Jira settings and configuration

Optional arguments:
  --raw                  Show raw settings values
  -h, --help             Show this help message and exit

Examples:
  $(basename "$0")                    # Show formatted settings
  $(basename "$0") --raw              # Show raw settings format
EOF
}

function ctrlc_trap() {
  log_newline
  log_warning "Script interrupted. Exiting."
  exit 130
}
trap ctrlc_trap SIGINT

# Parse arguments
declare raw_mode=""

while [[ $# -gt 0 ]]; do
  case $1 in
    -h|--help)
      print_usage
      exit 0
      ;;
    --raw)
      raw_mode="true"
      shift
      ;;
    *)
      log_error "Unknown option: $1"
      print_usage
      exit 1
      ;;
  esac
done

# Helper function to safely parse array settings
parse_array_setting() {
  local setting_value="$1"
  local -n result_array=$2
  
  result_array=()
  
  if [[ -n "${setting_value}" && "${setting_value}" != "()" ]]; then
    # Remove parentheses
    local cleaned=${setting_value#\(}
    cleaned=${cleaned%\)}
    
    # Extract quoted strings safely
    while IFS= read -r -d '' item; do
      result_array+=("$item")
    done < <(echo "$cleaned" | grep -o '"[^"]*"' | sed 's/"//g' | tr '\n' '\0')
  fi
}

# Title and Dependency Checks
log_title "Jira Settings Configuration"

# Main Logic
log_heading "Current Jira Settings"

# Get all Jira-related settings
jira_team_members=$(settings_get "JIRA_TEAM_MEMBERS")
jira_common_labels=$(settings_get "JIRA_COMMON_LABELS")
jira_components=$(settings_get "JIRA_COMPONENTS")
jira_projects=$(settings_get "JIRA_PROJECTS")
jira_default_project=$(settings_get "JIRA_DEFAULT_PROJECT")
jira_issue_types=$(settings_get "JIRA_ISSUE_TYPES")
jira_priorities=$(settings_get "JIRA_PRIORITIES")

if [[ "${raw_mode}" == "true" ]]; then
  log_subheading "Raw Settings Format"
  log_message "JIRA_TEAM_MEMBERS=${jira_team_members}"
  log_message "JIRA_COMMON_LABELS=${jira_common_labels}"
  log_message "JIRA_COMPONENTS=${jira_components}"
  log_message "JIRA_PROJECTS=${jira_projects}"
  log_message "JIRA_DEFAULT_PROJECT=${jira_default_project}"
  log_message "JIRA_ISSUE_TYPES=${jira_issue_types}"
  log_message "JIRA_PRIORITIES=${jira_priorities}"
else
  log_subheading "Team Members"
  declare -a members_array
  parse_array_setting "${jira_team_members}" members_array
  if [[ ${#members_array[@]} -gt 0 ]]; then
    printf '  %s\n' "${members_array[@]}"
  else
    log_message "  None configured"
  fi

  log_subheading "Common Labels"
  declare -a labels_array
  parse_array_setting "${jira_common_labels}" labels_array
  if [[ ${#labels_array[@]} -gt 0 ]]; then
    printf '  %s\n' "${labels_array[@]}"
  else
    log_message "  None configured"
  fi

  log_subheading "Components"
  declare -a components_array
  parse_array_setting "${jira_components}" components_array
  if [[ ${#components_array[@]} -gt 0 ]]; then
    printf '  %s\n' "${components_array[@]}"
  else
    log_message "  None configured"
  fi

  log_subheading "Projects"
  declare -a projects_array
  parse_array_setting "${jira_projects}" projects_array
  if [[ ${#projects_array[@]} -gt 0 ]]; then
    printf '  %s\n' "${projects_array[@]}"
  else
    log_message "  None configured"
  fi

  log_subheading "Default Project"
  log_message "  ${jira_default_project:-Not set}"

  log_subheading "Issue Types"
  declare -a types_array
  parse_array_setting "${jira_issue_types}" types_array
  if [[ ${#types_array[@]} -gt 0 ]]; then
    printf '  %s\n' "${types_array[@]}"
  else
    log_message "  Using defaults"
  fi

  log_subheading "Priorities"
  declare -a priorities_array
  parse_array_setting "${jira_priorities}" priorities_array
  if [[ ${#priorities_array[@]} -gt 0 ]]; then
    printf '  %s\n' "${priorities_array[@]}"
  else
    log_message "  Using defaults"
  fi
fi

log_newline
log_subheading "Settings Files"
log_message "  User settings: $(settings_get_path)"
log_message "  Defaults file: $(settings_get_defaults_path)"

log_success "Settings displayed successfully"