#!/usr/bin/env bash

# Environment setup
set -o pipefail
[[ ${DEBUG-} ]] && set -o xtrace
SCRIPT_DIR="$(cd "${BASH_SOURCE[0]%/*}" || exit 1; pwd)"
[[ ":${PATH}:" != *:"${SCRIPT_DIR}":* ]] && export PATH="${SCRIPT_DIR}:${PATH}"
source "${SCRIPT_DIR}/../../bash_modules/terminal.sh"
[[ -z ${BASH_MODULES_DIR-} ]] && echo "ERROR: terminal.sh module missing" && exit 1
source "${BASH_MODULES_DIR}/settings.sh"
source "${BASH_MODULES_DIR}/user-input.sh"

function print_usage() {
  cat <<EOF
Usage: $(basename "$0") <ISSUE-KEY> [options]

Delete a Jira issue with confirmation

Dependencies:
  jira                   The jira CLI tool

Required arguments:
  ISSUE-KEY              Issue key to delete (e.g., GCP-479)

Optional arguments:
  --cascade              Delete issue along with subtasks
  --force                Skip confirmation prompt
  -h, --help             Show this help message and exit

Examples:
  $(basename "$0") GCP-479                    # Delete with confirmation
  $(basename "$0") GCP-479 --cascade         # Delete with subtasks
  $(basename "$0") GCP-479 --force           # Delete without confirmation
EOF
}

function ctrlc_trap() {
  log_newline
  log_warning "Script interrupted. Exiting."
  exit 130
}
trap ctrlc_trap SIGINT

# Parse arguments
if [[ $# -lt 1 || "${1}" == "-h" || "${1}" == "--help" ]]; then
  print_usage
  exit 1
fi

declare issue_key="$1"
shift

declare cascade=""
declare force=""

while [[ $# -gt 0 ]]; do
  case $1 in
    --cascade)
      cascade="--cascade"
      shift
      ;;
    --force)
      force="true"
      shift
      ;;
    *)
      log_error "Unknown option: $1"
      print_usage
      exit 1
      ;;
  esac
done

# Title and Dependency Checks
log_title "Delete Jira Issue"

dependencies=(jira)
for cmd in "${dependencies[@]}"; do
    if ! command -v "${cmd}" >/dev/null; then
        log_error "ERROR: Missing dependency - '${cmd}'"
        exit 1
    fi
done

# Get project setting
jira_project=$(settings_get "JIRA_DEFAULT_PROJECT")

# Validation - check if issue exists
cmd_check=(jira issue view "${issue_key}")
if [[ -n "${jira_project}" ]]; then
  cmd_check+=("--project" "${jira_project}")
fi
cmd_check+=(--plain)
if ! "${cmd_check[@]}" > /dev/null 2>&1; then
  log_failure "Could not access issue ${issue_key}"
  exit 1
fi

# Get issue details for confirmation
cmd_summary=(jira issue view "${issue_key}")
if [[ -n "${jira_project}" ]]; then
  cmd_summary+=("--project" "${jira_project}")
fi
cmd_summary+=(--plain)
issue_summary=$("${cmd_summary[@]}" 2>/dev/null | head -1 || echo "Unknown")

# Report Operational Values
log_heading "Deletion Details"
log_message "$(
  cat <<EOF
   Issue Key: '${issue_key}'
     Summary: '${issue_summary}'
     Cascade: '${cascade:+Yes}'
EOF
)"

# Confirmation
if [[ "${force}" != "true" ]]; then
  log_warning "This will permanently delete the issue!"
  if [[ -n "${cascade}" ]]; then
    log_warning "This will also delete all subtasks!"
  fi
  
  if ! ask_yes_no_question "Are you sure you want to delete ${issue_key}?"; then
    log_message "Deletion cancelled"
    exit 0
  fi
fi

# Build command
cmd=(jira issue delete "${issue_key}")

if [[ -n "${cascade}" ]]; then
  cmd+=("${cascade}")
fi

if [[ -n "${jira_project}" ]]; then
  cmd+=("--project" "${jira_project}")
fi

# Main Logic
log_heading "Deleting Issue"
log_message "Executing: ${cmd[*]}"

if "${cmd[@]}"; then
  log_success "Issue ${issue_key} deleted successfully"
else
  log_failure "Failed to delete issue"
  exit 1
fi