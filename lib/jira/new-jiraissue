#!/usr/bin/env bash

# Environment setup
set -o pipefail
[[ ${DEBUG-} ]] && set -o xtrace
SCRIPT_DIR="$(cd "${BASH_SOURCE[0]%/*}" || exit 1; pwd)"
[[ ":${PATH}:" != *:"${SCRIPT_DIR}":* ]] && export PATH="${SCRIPT_DIR}:${PATH}"
source "${SCRIPT_DIR}/../../bash_modules/terminal.sh"
[[ -z ${BASH_MODULES_DIR-} ]] && echo "ERROR: terminal.sh module missing" && exit 1
source "${BASH_MODULES_DIR}/settings.sh"

function print_usage() {
  cat <<EOF
Usage: $(basename "$0") [options]

Create a new Jira issue with interactive prompts or specified values

Dependencies:
  jira                   The jira CLI tool
  fzf                    Fuzzy finder for interactive selection

Options:
  -t, --type TYPE        Issue type (Task, Bug, Story, Epic)
  -s, --summary TEXT     Issue summary/title
  -b, --body TEXT        Issue description
  -y, --priority PRIORITY Issue priority (Lowest, Low, Medium, High, Highest)
  -a, --assignee USER    Issue assignee (email or display name)
  -l, --label LABEL      Issue labels (can be used multiple times)
  -C, --component COMP   Issue components (can be used multiple times)
  -P, --parent KEY       Parent issue key (for sub-tasks)
  --template FILE        Load description from template file
  --web                  Open in browser after creation
  --no-input             Disable interactive prompts
  -h, --help             Show this help message and exit

Examples:
  $(basename "$0")                              # Interactive mode
  $(basename "$0") -t Bug -s "Login issue"     # Quick bug creation
  $(basename "$0") --template bug-template.md  # Use template
EOF
}

function ctrlc_trap() {
  log_newline
  log_warning "Script interrupted. Exiting."
  exit 130
}
trap ctrlc_trap SIGINT

# Helper function to safely parse array settings
parse_array_setting() {
  local setting_value="$1"
  local -n result_array=$2
  
  result_array=()
  
  if [[ -n "${setting_value}" && "${setting_value}" != "()" ]]; then
    # Remove parentheses
    local cleaned=${setting_value#\(}
    cleaned=${cleaned%\)}
    
    # Extract quoted strings safely
    while IFS= read -r -d '' item; do
      result_array+=("$item")
    done < <(echo "$cleaned" | grep -o '"[^"]*"' | sed 's/"//g' | tr '\n' '\0')
  fi
}

# Parse arguments
declare issue_type=""
declare summary=""
declare body=""
declare priority=""
declare assignee=""
declare labels=()
declare components=()
declare parent=""
declare template=""
declare web_flag=""
declare no_input=""

while [[ $# -gt 0 ]]; do
  case $1 in
    -h|--help)
      print_usage
      exit 0
      ;;
    -t|--type)
      issue_type="$2"
      shift 2
      ;;
    -s|--summary)
      summary="$2"
      shift 2
      ;;
    -b|--body)
      body="$2"
      shift 2
      ;;
    -y|--priority)
      priority="$2"
      shift 2
      ;;
    -a|--assignee)
      assignee="$2"
      shift 2
      ;;
    -l|--label)
      labels+=("$2")
      shift 2
      ;;
    -C|--component)
      components+=("$2")
      shift 2
      ;;
    -P|--parent)
      parent="$2"
      shift 2
      ;;
    --template)
      template="$2"
      shift 2
      ;;
    --web)
      web_flag="--web"
      shift
      ;;
    --no-input)
      no_input="--no-input"
      shift
      ;;
    *)
      log_error "Unknown option: $1"
      print_usage
      exit 1
      ;;
  esac
done

# Title and Dependency Checks
log_title "Create New Jira Issue"

dependencies=(jira)
if [[ -z "${no_input}" ]]; then
  dependencies+=(fzf)
fi

for cmd in "${dependencies[@]}"; do
    if ! command -v "${cmd}" >/dev/null; then
        log_error "ERROR: Missing dependency - '${cmd}'"
        exit 1
    fi
done

# Get project setting
jira_project=$(settings_get "JIRA_DEFAULT_PROJECT")

# Interactive mode for missing values
if [[ -z "${no_input}" ]]; then
  log_heading "Interactive Issue Creation"
  
  # Issue type selection
  if [[ -z "${issue_type}" ]]; then
    log_message "Select issue type:"
    issue_types=$(settings_get "JIRA_ISSUE_TYPES")
    declare -a types_array
    parse_array_setting "${issue_types}" types_array
    if [[ ${#types_array[@]} -gt 0 ]]; then
      issue_type=$(printf '%s\n' "${types_array[@]}" | fzf --prompt="Issue type: " --height=40% --reverse)
    else
      # Default types
      issue_type=$(printf '%s\n' "Task" "Bug" "Story" "Epic" | fzf --prompt="Issue type: " --height=40% --reverse)
    fi
    
    if [[ -z "${issue_type}" ]]; then
      log_failure "No issue type selected"
      exit 1
    fi
  fi
  
  # Priority selection
  if [[ -z "${priority}" ]]; then
    log_message "Select priority:"
    priorities=$(settings_get "JIRA_PRIORITIES")
    declare -a priorities_array
    parse_array_setting "${priorities}" priorities_array
    if [[ ${#priorities_array[@]} -gt 0 ]]; then
      priority=$(printf '%s\n' "${priorities_array[@]}" | fzf --prompt="Priority: " --height=40% --reverse)
    else
      priority=$(printf '%s\n' "Medium" "High" "Low" "Highest" "Lowest" | fzf --prompt="Priority: " --height=40% --reverse)
    fi
  fi
  
  # Assignee selection
  if [[ -z "${assignee}" ]]; then
    log_message "Select assignee (or skip):"
    team_members=$(settings_get "JIRA_TEAM_MEMBERS")
    declare -a members_array
    parse_array_setting "${team_members}" members_array
    if [[ ${#members_array[@]} -gt 0 ]]; then
      assignee=$(printf '%s\n' "Skip" "${members_array[@]}" | fzf --prompt="Assignee: " --height=40% --reverse)
      if [[ "${assignee}" == "Skip" ]]; then
        assignee=""
      fi
    fi
  fi
  
  # Summary prompt
  if [[ -z "${summary}" ]]; then
    read -rp "Issue summary: " summary
    if [[ -z "${summary}" ]]; then
      log_failure "Summary is required"
      exit 1
    fi
  fi
  
  # Body prompt
  if [[ -z "${body}" && -z "${template}" ]]; then
    read -rp "Issue description (optional): " body
  fi
fi

# Report Operational Values
log_heading "Issue Details"
log_message "$(
  cat <<EOF
      Project: '${jira_project}'
         Type: '${issue_type}'
      Summary: '${summary}'
     Priority: '${priority}'
     Assignee: '${assignee}'
       Labels: '${labels[*]}'
   Components: '${components[*]}'
       Parent: '${parent}'
EOF
)"

# Build command
cmd=(jira issue create)

if [[ -n "${jira_project}" ]]; then
  cmd+=("--project" "${jira_project}")
fi

if [[ -n "${issue_type}" ]]; then
  cmd+=(--type "${issue_type}")
fi

if [[ -n "${summary}" ]]; then
  cmd+=(--summary "${summary}")
fi

if [[ -n "${body}" ]]; then
  cmd+=(--body "${body}")
fi

if [[ -n "${priority}" ]]; then
  cmd+=(--priority "${priority}")
fi

if [[ -n "${assignee}" ]]; then
  cmd+=(--assignee "${assignee}")
fi

if [[ -n "${parent}" ]]; then
  cmd+=(--parent "${parent}")
fi

if [[ -n "${template}" ]]; then
  cmd+=(--template "${template}")
fi

for label in "${labels[@]}"; do
  cmd+=(--label "${label}")
done

for component in "${components[@]}"; do
  cmd+=(--component "${component}")
done

if [[ -n "${web_flag}" ]]; then
  cmd+=("${web_flag}")
fi

if [[ -n "${no_input}" ]]; then
  cmd+=("${no_input}")
fi

# Main Logic
log_heading "Creating Issue"
log_message "Executing: ${cmd[*]}"

if "${cmd[@]}"; then
  log_success "Issue created successfully"
else
  log_failure "Failed to create issue"
  exit 1
fi