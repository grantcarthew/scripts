#!/usr/bin/env bash

# Environment setup
set -o pipefail
[[ ${DEBUG-} ]] && set -o xtrace
SCRIPT_DIR="$(cd "${BASH_SOURCE[0]%/*}" || exit 1; pwd)"
[[ ":${PATH}:" != *:"${SCRIPT_DIR}":* ]] && export PATH="${SCRIPT_DIR}:${PATH}"
source "${SCRIPT_DIR}/../../bash_modules/terminal.sh"
[[ -z ${BASH_MODULES_DIR-} ]] && echo "ERROR: terminal.sh module missing" && exit 1
source "${BASH_MODULES_DIR}/settings.sh"
source "${BASH_MODULES_DIR}/user-input.sh"

function print_usage() {
  cat <<EOF
Usage: $(basename "$0") [options]

Manage the Jira team members list for assignee selection

Dependencies:
  fzf                    Fuzzy finder for interactive selection

Options:
  --add EMAIL            Add a team member
  --remove               Remove team members (interactive)
  --list                 List current team members
  --clear                Clear all team members
  -h, --help             Show this help message and exit

Examples:
  $(basename "$0")                           # Interactive management
  $(basename "$0") --add john@company.com   # Add specific member
  $(basename "$0") --remove                 # Remove members interactively
  $(basename "$0") --list                   # Show current list
EOF
}

function ctrlc_trap() {
  log_newline
  log_warning "Script interrupted. Exiting."
  exit 130
}
trap ctrlc_trap SIGINT

# Helper function to safely parse array settings
parse_array_setting() {
  local setting_value="$1"
  local -n result_array=$2
  
  result_array=()
  
  if [[ -n "${setting_value}" && "${setting_value}" != "()" ]]; then
    # Remove parentheses
    local cleaned=${setting_value#\(}
    cleaned=${cleaned%\)}
    
    # Extract quoted strings safely
    while IFS= read -r -d '' item; do
      result_array+=("$item")
    done < <(echo "$cleaned" | grep -o '"[^"]*"' | sed 's/"//g' | tr '\n' '\0')
  fi
}

function list_team_members() {
  local team_members
  team_members=$(settings_get "JIRA_TEAM_MEMBERS")
  
  declare -a members_array
  parse_array_setting "${team_members}" members_array
  if [[ ${#members_array[@]} -gt 0 ]]; then
    log_message "Current team members:"
    printf '  %s\n' "${members_array[@]}"
    return 0
  fi
  
  log_message "No team members configured"
  return 1
}

function add_team_member() {
  local new_member="$1"
  local team_members
  team_members=$(settings_get "JIRA_TEAM_MEMBERS")
  
  # Parse existing array
  local members_array=()
  parse_array_setting "${team_members}" members_array
  
  # Check if already exists
  for member in "${members_array[@]}"; do
    if [[ "${member}" == "${new_member}" ]]; then
      log_warning "Team member '${new_member}' already exists"
      return 1
    fi
  done
  
  # Add new member
  members_array+=("${new_member}")
  
  # Convert back to string format for settings
  local members_string=""
  for member in "${members_array[@]}"; do
    members_string="${members_string} \"${member}\""
  done
  
  settings_set "JIRA_TEAM_MEMBERS" "(${members_string})"
  log_success "Added team member: ${new_member}"
}

function remove_team_members() {
  local team_members
  team_members=$(settings_get "JIRA_TEAM_MEMBERS")
  
  if [[ -z "${team_members}" ]]; then
    log_warning "No team members to remove"
    return 1
  fi
  
  declare -a members_array
  parse_array_setting "${team_members}" members_array
  if [[ ${#members_array[@]} -eq 0 ]]; then
    log_warning "No team members to remove"
    return 1
  fi
  
  log_message "Select team members to remove:"
  local to_remove
  to_remove=$(printf '%s\n' "${members_array[@]}" | fzf --multi --prompt="Remove (use TAB for multi-select): " --height=40% --reverse)
  
  if [[ -z "${to_remove}" ]]; then
    log_message "No members selected for removal"
    return 0
  fi
  
  # Build new array excluding selected members
  local new_members_array=()
  
  # Convert removal list to array for more efficient lookup
  local remove_array=()
  while IFS= read -r remove_member; do
    remove_array+=("${remove_member}")
    log_success "Removed: ${remove_member}"
  done <<< "${to_remove}"
  
  # Keep only members not in removal list
  for member in "${members_array[@]}"; do
    local should_keep=true
    for remove_member in "${remove_array[@]}"; do
      if [[ "${member}" == "${remove_member}" ]]; then
        should_keep=false
        break
      fi
    done
    
    if [[ "${should_keep}" == true ]]; then
      new_members_array+=("${member}")
    fi
  done
  
  # Update settings
  if [[ ${#new_members_array[@]} -eq 0 ]]; then
    settings_set "JIRA_TEAM_MEMBERS" "()"
  else
    local members_string=""
    for member in "${new_members_array[@]}"; do
      members_string="${members_string} \"${member}\""
    done
    settings_set "JIRA_TEAM_MEMBERS" "(${members_string})"
  fi
}

function interactive_management() {
  while true; do
    log_heading "Team Members Management"
    list_team_members
    log_newline
    
    local actions=("Add team member" "Remove team members" "Clear all" "Exit")
    local action
    action=$(printf '%s\n' "${actions[@]}" | fzf --prompt="Action: " --height=40% --reverse)
    
    case "${action}" in
      "Add team member")
        read -rp "Enter email or display name: " new_member
        if [[ -n "${new_member}" ]]; then
          add_team_member "${new_member}"
        fi
        ;;
      "Remove team members")
        remove_team_members
        ;;
      "Clear all")
        if ask_yes_no_question "Are you sure you want to clear all team members?"; then
          settings_set "JIRA_TEAM_MEMBERS" "()"
          log_success "All team members cleared"
        fi
        ;;
      "Exit")
        break
        ;;
      "")
        break
        ;;
    esac
    
    log_newline
  done
}

# Parse arguments
declare add_member=""
declare remove_mode=""
declare list_mode=""
declare clear_mode=""

while [[ $# -gt 0 ]]; do
  case $1 in
    -h|--help)
      print_usage
      exit 0
      ;;
    --add)
      add_member="$2"
      shift 2
      ;;
    --remove)
      remove_mode="true"
      shift
      ;;
    --list)
      list_mode="true"
      shift
      ;;
    --clear)
      clear_mode="true"
      shift
      ;;
    *)
      log_error "Unknown option: $1"
      print_usage
      exit 1
      ;;
  esac
done

# Title and Dependency Checks
log_title "Manage Jira Team Members"

dependencies=(fzf)
for cmd in "${dependencies[@]}"; do
    if ! command -v "${cmd}" >/dev/null; then
        log_error "ERROR: Missing dependency - '${cmd}'"
        exit 1
    fi
done

# Main Logic
if [[ -n "${add_member}" ]]; then
  add_team_member "${add_member}"
elif [[ "${remove_mode}" == "true" ]]; then
  remove_team_members
elif [[ "${list_mode}" == "true" ]]; then
  list_team_members
elif [[ "${clear_mode}" == "true" ]]; then
  if ask_yes_no_question "Are you sure you want to clear all team members?"; then
    settings_set "JIRA_TEAM_MEMBERS" "()"
    log_success "All team members cleared"
  fi
else
  interactive_management
fi