#!/usr/bin/env bash

# Environment setup
set -o pipefail
[[ ${DEBUG-} ]] && set -o xtrace
SCRIPT_DIR="$(cd "${BASH_SOURCE[0]%/*}" || exit 1; pwd)"
[[ ":${PATH}:" != *:"${SCRIPT_DIR}":* ]] && export PATH="${SCRIPT_DIR}:${PATH}"
source "${SCRIPT_DIR}/../../bash_modules/terminal.sh"
[[ -z ${BASH_MODULES_DIR-} ]] && echo "ERROR: terminal.sh module missing" && exit 1
source "${BASH_MODULES_DIR}/settings.sh"

function print_usage() {
  cat <<EOF
Usage: $(basename "$0") <ISSUE-KEY> [STATE] [options]

Transition a Jira issue to a different state with interactive state selection

Dependencies:
  jira                   The jira CLI tool
  fzf                    Fuzzy finder for interactive selection

Required arguments:
  ISSUE-KEY              Issue key to transition (e.g., GCP-479)

Optional arguments:
  STATE                  Target state (RECOMMENDED: omit for interactive selection)
  --comment TEXT         Add comment during transition
  -a, --assignee USER    Assign to user during transition
  -R, --resolution TEXT  Set resolution during transition
  --web                  Open in browser after transition
  -h, --help             Show this help message and exit

Examples:
  $(basename "$0") GCP-479                           # Interactive state selection (RECOMMENDED)
  $(basename "$0") GCP-479 --comment "Work done"    # Interactive with comment
  $(basename "$0") GCP-479 "Done"                   # Direct transition (if you know exact state name)
EOF
}

function ctrlc_trap() {
  log_newline
  log_warning "Script interrupted. Exiting."
  exit 130
}
trap ctrlc_trap SIGINT

function get_available_transitions() {
  local issue_key="$1"
  local jira_project="$2"
  
  # Try to get issue details to determine current state
  local current_status
  cmd_status=(jira issue view "${issue_key}")
  if [[ -n "${jira_project}" ]]; then
    cmd_status+=("--project" "${jira_project}")
  fi
  cmd_status+=(--plain)
  current_status=$("${cmd_status[@]}" 2>/dev/null | grep -i "status" | head -1 | awk -F: '{print $2}' | xargs)
  
  # Attempt to discover available transitions by testing a dummy transition
  # and parsing the error message for valid transitions
  local temp_file=$(mktemp)
  trap "rm -f '${temp_file}'" EXIT
  
  cmd_test=(jira issue move "${issue_key}" "INVALID_TRANSITION_TEST")
  if [[ -n "${jira_project}" ]]; then
    cmd_test+=("--project" "${jira_project}")
  fi
  if "${cmd_test[@]}" 2>"${temp_file}" >/dev/null; then
    # Unlikely to succeed, but just in case
    :
  fi
  
  # Try to extract available transitions from error message
  local available_from_error=""
  if [[ -s "${temp_file}" ]]; then
    available_from_error=$(grep -oE "(to|transition|move).*:" "${temp_file}" 2>/dev/null | sed 's/.*://' | tr ',' '\n' | sed 's/^ *//;s/ *$//' | grep -v '^$' || true)
  fi
  
  # If we found transitions in error message, use those
  if [[ -n "${available_from_error}" ]]; then
    echo "${available_from_error}"
    return 0
  fi
  
  # Fallback: provide common transitions based on current status and typical workflows
  case "${current_status,,}" in
    *"to do"*|*"open"*|*"backlog"*|*"new"*)
      echo -e "In Progress\nDoing\nDone\nClosed"
      ;;
    *"in progress"*|*"doing"*|*"development"*)
      echo -e "Done\nCode Review\nTesting\nClosed\nTo Do\nBacklog"
      ;;
    *"review"*|*"testing"*|*"qa"*)
      echo -e "Done\nClosed\nIn Progress\nTo Do"
      ;;
    *"done"*|*"closed"*|*"resolved"*|*"complete"*)
      echo -e "To Do\nIn Progress\nReopen\nBacklog"
      ;;
    *)
      # Default comprehensive list of common transitions
      echo -e "To Do\nBacklog\nIn Progress\nDoing\nCode Review\nTesting\nDone\nClosed\nResolved"
      ;;
  esac
}

# Parse arguments
if [[ $# -lt 1 || "${1}" == "-h" || "${1}" == "--help" ]]; then
  print_usage
  exit 1
fi

declare issue_key="$1"
shift

declare state=""
declare comment=""
declare assignee=""
declare resolution=""
declare web_flag=""

# Check if second argument is a state (doesn't start with -)
if [[ $# -gt 0 && ! "$1" =~ ^- ]]; then
  state="$1"
  shift
fi

while [[ $# -gt 0 ]]; do
  case $1 in
    --comment)
      comment="$2"
      shift 2
      ;;
    -a|--assignee)
      assignee="$2"
      shift 2
      ;;
    -R|--resolution)
      resolution="$2"
      shift 2
      ;;
    --web)
      web_flag="--web"
      shift
      ;;
    *)
      log_error "Unknown option: $1"
      print_usage
      exit 1
      ;;
  esac
done

# Title and Dependency Checks
log_title "Move Jira Issue"

dependencies=(jira)
if [[ -z "${state}" ]]; then
  dependencies+=(fzf)
fi

for cmd in "${dependencies[@]}"; do
    if ! command -v "${cmd}" >/dev/null; then
        log_error "ERROR: Missing dependency - '${cmd}'"
        exit 1
    fi
done

# Get project setting
jira_project=$(settings_get "JIRA_DEFAULT_PROJECT")

# Report Operational Values
log_heading "Operational Values"
log_message "$(
  cat <<EOF
   Issue Key: '${issue_key}'
  Target State: '${state}'
      Comment: '${comment}'
     Assignee: '${assignee}'
   Resolution: '${resolution}'
EOF
)"

# Interactive state selection if not provided
if [[ -z "${state}" ]]; then
  log_heading "Interactive State Selection"
  
  log_message "Getting current issue status..."
  cmd_check=(jira issue view "${issue_key}")
  if [[ -n "${jira_project}" ]]; then
    cmd_check+=("--project" "${jira_project}")
  fi
  cmd_check+=(--plain)
  if ! "${cmd_check[@]}" > /dev/null 2>&1; then
    log_failure "Could not access issue ${issue_key}"
    exit 1
  fi
  
  log_message "Select target state:"
  available_transitions=$(get_available_transitions "${issue_key}" "${jira_project}")
  
  state=$(echo "${available_transitions}" | fzf --prompt="Target state: " --height=40% --reverse)
  
  if [[ -z "${state}" ]]; then
    log_failure "No state selected"
    exit 1
  fi
  
  log_message "Selected state: ${state}"
fi

# Build command
cmd=(jira issue move "${issue_key}" "${state}")

if [[ -n "${jira_project}" ]]; then
  cmd+=("--project" "${jira_project}")
fi

if [[ -n "${comment}" ]]; then
  cmd+=(--comment "${comment}")
fi

if [[ -n "${assignee}" ]]; then
  cmd+=(--assignee "${assignee}")
fi

if [[ -n "${resolution}" ]]; then
  cmd+=(--resolution "${resolution}")
fi

if [[ -n "${web_flag}" ]]; then
  cmd+=("${web_flag}")
fi

# Main Logic
log_heading "Transitioning Issue"
log_message "Moving ${issue_key} to '${state}'"
log_message "Executing: ${cmd[*]}"

if "${cmd[@]}"; then
  log_success "Issue transitioned successfully to '${state}'"
else
  log_failure "Failed to transition issue"
  exit 1
fi