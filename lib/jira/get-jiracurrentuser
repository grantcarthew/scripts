#!/usr/bin/env bash

# Environment setup
set -o pipefail
[[ ${DEBUG-} ]] && set -o xtrace
SCRIPT_DIR="$(cd "${BASH_SOURCE[0]%/*}" || exit 1; pwd)"
[[ ":${PATH}:" != *:"${SCRIPT_DIR}":* ]] && export PATH="${SCRIPT_DIR}:${PATH}"
source "${SCRIPT_DIR}/../../bash_modules/terminal.sh"
[[ -z ${BASH_MODULES_DIR-} ]] && echo "ERROR: terminal.sh module missing" && exit 1
source "${BASH_MODULES_DIR}/settings.sh"

function print_usage() {
  cat <<EOF
Usage: $(basename "$0") [options]

Display current Jira user information and configuration

Dependencies:
  jira                   The jira CLI tool

Optional arguments:
  --config               Show configuration details
  -h, --help             Show this help message and exit

Examples:
  $(basename "$0")                    # Show current user
  $(basename "$0") --config           # Show user and config details
EOF
}

function ctrlc_trap() {
  log_newline
  log_warning "Script interrupted. Exiting."
  exit 130
}
trap ctrlc_trap SIGINT

# Parse arguments
declare show_config=""

while [[ $# -gt 0 ]]; do
  case $1 in
    -h|--help)
      print_usage
      exit 0
      ;;
    --config)
      show_config="true"
      shift
      ;;
    *)
      log_error "Unknown option: $1"
      print_usage
      exit 1
      ;;
  esac
done

# Title and Dependency Checks
log_title "Jira Current User Information"

dependencies=(jira)
for cmd in "${dependencies[@]}"; do
    if ! command -v "${cmd}" >/dev/null; then
        log_error "ERROR: Missing dependency - '${cmd}'"
        exit 1
    fi
done

# Main Logic
log_heading "Current User"

current_user=$(jira me 2>/dev/null)
if [[ -n "${current_user}" ]]; then
  log_message "  ${current_user}"
  log_success "User information retrieved successfully"
else
  log_failure "Could not retrieve current user information"
  log_message "This might indicate a configuration issue with jira-cli"
  exit 1
fi

if [[ "${show_config}" == "true" ]]; then
  log_heading "Configuration Details"
  
  # Get project setting
  jira_project=$(settings_get "JIRA_DEFAULT_PROJECT")
  log_message "  Default Project: ${jira_project:-Not set}"
  
  # Try to get server info
  log_subheading "Server Information"
  if jira serverinfo 2>/dev/null | sed 's/^/  /'; then
    :  # Command succeeded
  else
    log_message "  Could not retrieve server information"
  fi
fi