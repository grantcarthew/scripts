#!/usr/bin/env bash

# Environment setup
# -----------------------------------------------------------------------------
set -o pipefail
[[ ${DEBUG-} ]] && set -o xtrace
SCRIPT_DIR="$(cd "${BASH_SOURCE[0]%/*}" || exit 1; pwd)"
[[ ":${PATH}:" != *":${SCRIPT_DIR}:"* ]] && export PATH="${SCRIPT_DIR}:${PATH}"
source "${SCRIPT_DIR}/../../bash_modules/terminal.sh"
source "${SCRIPT_DIR}/../../bash_modules/settings.sh"
source "${SCRIPT_DIR}/../../bash_modules/ai.sh"
[[ -z ${BASH_MODULES_DIR-} ]] && echo "ERROR: terminal.sh module missing" && exit 1

function print_usage() {
  cat <<EOF
Usage: $(basename "$0") [special-instructions]

Review git changes using AI - staged changes or branch diff.

Dependencies:
  git                Git version control
  aichat             AI chat tool

Optional arguments:
  special-instructions  Special instructions for the AI reviewer

This script will:
1. Check if there are staged git changes and review them
2. If no staged changes and not on default branch, review branch diff
3. Get a review of the changes from AI
4. Report on any findings
EOF
}

if [[ $# -gt 1 || "${1}" == "-h" || "${1}" == "--help" ]]; then
  print_usage
  exit 0
fi

if [[ $# -lt 1 ]]; then
  special_instructions="None"
else
  special_instructions="${*}"
fi

function ctrlc_trap() {
  log_newline
  log_warning "Script interrupted. Exiting."
  exit 130
}
trap ctrlc_trap SIGINT

# Title and Dependency Checks
# -----------------------------------------------------------------------------
log_title "[g]it [d]iff [r]eview"

dependencies=(git aichat)
for cmd in "${dependencies[@]}"; do
  if ! command -v "${cmd}" >/dev/null; then
    log_error "ERROR: Missing dependency - '${cmd}'"
    exit 1
  fi
done

if ! git rev-parse --is-inside-work-tree &>/dev/null; then
  log_error "ERROR: Not inside a git repository"
  exit 1
fi

# Check for changes to review
# -----------------------------------------------------------------------------
staged_changes="$(git diff --staged)"

if [[ -n "${staged_changes}" ]]; then
  log_message "Found staged changes - reviewing staged diff..."
  diff_content="${staged_changes}"
  diff_type="staged"
else
  # Get branch information for fallback
  if git show-ref --quiet refs/heads/main; then
    default_branch="main"
  elif git show-ref --quiet refs/heads/master; then
    default_branch="master"
  else
    log_error "ERROR: Could not determine default branch (neither main nor master found)"
    exit 1
  fi

  current_branch=$(git rev-parse --abbrev-ref HEAD)
  if [[ $? -ne 0 ]]; then
    log_error "ERROR: Failed to determine current branch"
    exit 1
  fi

  if [[ "${current_branch}" == "${default_branch}" ]]; then
    log_error "ERROR: No staged changes and currently on default branch '${default_branch}'. Either stage changes or switch to a feature branch."
    exit 1
  fi

  log_message "No staged changes - reviewing diff between '${default_branch}' and '${current_branch}'..."
  diff_content=$(git diff "${default_branch}...${current_branch}")
  if [[ $? -ne 0 ]]; then
    log_error "ERROR: Failed to generate diff between branches"
    exit 1
  fi

  if [[ -z "${diff_content}" ]]; then
    log_error "ERROR: No differences found between '${default_branch}' and '${current_branch}'"
    exit 1
  fi

  diff_type="branch"
fi

# AI Review
# -----------------------------------------------------------------------------
log_message "Getting AI review of changes..."

prompt="$(cat <<EOF
$(cat "${SCRIPT_DIR}/gdr-prompt.md")

## Special Instructions

${special_instructions}

## Git Diff (${diff_type})

\`\`\`diff
${diff_content}
\`\`\`

EOF
)"

if ! review=$(eval "$(ai_get_command gamma pro "${SCRIPT_DIR}/gdr-prompt.md" "${prompt}")"); then
  log_error "ERROR: AI chat command failed"
  exit 1
fi

if [[ -z "${review}" ]]; then
  log_error "ERROR: Generated review is empty"
  exit 1
fi

log_newline
echo "${review}"
log_newline
