#!/usr/bin/env bash

# Environment setup
# -----------------------------------------------------------------------------
set -o pipefail
[[ ${DEBUG-} ]] && set -o xtrace
SCRIPT_DIR="$(cd "${BASH_SOURCE[0]%/*}" || exit 1; pwd)"
[[ ":${PATH}:" != *:"${SCRIPT_DIR}":* ]] && export PATH="${SCRIPT_DIR}:${PATH}"
source "${SCRIPT_DIR}/../../bash_modules/terminal.sh"
source "${SCRIPT_DIR}/../../bash_modules/user-input.sh"
source "${SCRIPT_DIR}/../../bash_modules/settings.sh"
[[ -z ${BASH_MODULES_DIR-} ]] && echo "ERROR: terminal.sh module missing" && exit 1
AI_MODEL_PRO="$(settings_get "AI_MODEL_PRO")"

function print_usage() {
  cat <<EOF
Usage: $(basename "$0") [special-instructions]

Update CHANGELOG.md using AI based on current branch changes.

Dependencies:
  git                Git version control
  aichat             AI chat tool

Arguments:
  special-instructions  Optional special instructions for the AI prompt

This script will:
1. Determine the default branch (main or master)
2. Get the current branch name
3. Generate a diff between default and current branch
4. Read or create a CHANGELOG.md file
5. Use AI to update the changelog based on the diff
EOF
}

if [[ "${1}" == "-h" || "${1}" == "--help" ]]; then
  print_usage
  exit 0
fi

if [[ $# -eq 0 ]]; then
  special_instructions="None"
else
  special_instructions="$*"
fi

function ctrlc_trap() {
  log_newline
  log_warning "Script interrupted. Exiting."
  exit 130
}
trap ctrlc_trap SIGINT

# Title and Dependency Checks
# -----------------------------------------------------------------------------
log_title "[u]pdate [c]hange [l]og"

dependencies=(git aichat)
for cmd in "${dependencies[@]}"; do
  if ! command -v "${cmd}" >/dev/null; then
    log_error "ERROR: Missing dependency - '${cmd}'"
    exit 1
  fi
done

if ! git rev-parse --is-inside-work-tree &>/dev/null; then
  log_error "ERROR: Not inside a git repository"
  exit 1
fi

# Get branch information
# -----------------------------------------------------------------------------
if git show-ref --quiet refs/heads/main; then
  default_branch="main"
elif git show-ref --quiet refs/heads/master; then
  default_branch="master"
else
  log_error "ERROR: Could not determine default branch (neither main nor master found)"
  exit 1
fi
log_message "Default branch: ${default_branch}"

current_branch=$(git rev-parse --abbrev-ref HEAD)
if [[ $? -ne 0 ]]; then
  log_error "ERROR: Failed to determine current branch"
  exit 1
fi
log_message "Current branch: ${current_branch}"

if [[ "${current_branch}" == "${default_branch}" ]]; then
  log_error "ERROR: Current branch is the default branch. Please switch to a feature branch."
  exit 1
fi

# Generate diff between default and current branch
# -----------------------------------------------------------------------------
log_message "Generating diff between ${default_branch} and ${current_branch}..."
branch_diff=$(git diff "${default_branch}...${current_branch}")
if [[ $? -ne 0 ]]; then
  log_error "ERROR: Failed to generate diff between branches"
  exit 1
fi

if [[ -z "${branch_diff}" ]]; then
  log_warning "No differences found between ${default_branch} and ${current_branch}"
  exit 0
fi

# Handle CHANGELOG.md
# -----------------------------------------------------------------------------
changelog_path="${PWD}/CHANGELOG.md"
if [[ ! -f "${changelog_path}" ]]; then
  log_message "Creating new CHANGELOG.md..."
  if ! touch "${changelog_path}"; then
    log_error "ERROR: Failed to create CHANGELOG.md"
    exit 1
  fi
fi
current_changelog=$(cat "${changelog_path}" 2>/dev/null)

# Update Changelog using AI
# -----------------------------------------------------------------------------
log_message "Generating updated changelog..."

# Generate prompt using heredoc
prompt="$(cat <<EOF
$(cat "${SCRIPT_DIR}/ucl-prompt.md")

## Special Instructions

${special_instructions}

## Information

Current date: $(date +%Y-%m-%d)

### Existing CHANGELOG.md

Note: If the change log is empty, you will need to start a new one.

\`\`\`md
${current_changelog}
\`\`\`

### Git Diff

\`\`\`txt
${branch_diff}
\`\`\`
EOF
)"

if ! updated_changelog=$(aichat --model "${AI_MODEL_PRO}" "${prompt}"); then
  log_error "ERROR: AI chat command failed"
  exit 1
fi

if [[ -z "${updated_changelog}" ]]; then
  log_error "ERROR: Generated changelog is empty"
  exit 1
fi

log_newline
preview_lines=30
echo "${updated_changelog}" | head -n ${preview_lines}
if [[ "$(echo "${updated_changelog}" | wc -l)" -gt ${preview_lines} ]]; then
  log_message "... (showing only the first ${preview_lines} lines)"
fi
log_newline
log_line

if [[ "${updated_changelog}" == "${current_changelog}" ]]; then
  log_warning "No changes to add to the changelog. No update needed."
  exit 0
fi

if ! press_enter_to_continue "Press Enter to save the updated CHANGELOG.md, any other key to abort."; then
  log_warning "Update aborted"
  exit 1
fi

log_message "Saving updated CHANGELOG.md..."
if ! echo "${updated_changelog}" > "${changelog_path}"; then
  log_error "ERROR: Failed to save CHANGELOG.md"
  exit 1
fi

GIT_PAGER='' git diff "${changelog_path}"

log_success "CHANGELOG.md has been successfully updated!"
log_line
