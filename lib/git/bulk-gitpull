#!/usr/bin/env bash

set -o pipefail
SCRIPT_DIR="$(cd "${BASH_SOURCE[0]%/*}" || exit 1; pwd)"
source "${SCRIPT_DIR}/../../bash_modules/terminal.sh"

function print_usage() {
  cat <<EOF
Usage: $(basename "$0")

Iterate over each child directory, checkout well known branch if exists, and pull.
EOF
}

if [[ "${1}" == "-h" || "${1}" == "--help" ]]; then
  print_usage
  exit 0
fi

log_title "Git Pull All Repos in Child Directories"
log_heading "Dependency Check"

dependencies=(git)
for cmd in "${dependencies[@]}"; do
  if ! command -v "${cmd}" >/dev/null; then
    log_error "ERROR: Missing dependency - '${cmd}'"
    exit 1
  fi
done
log_success "Command-line dependencies installed"

log_heading "Processing Child Directories"

branches=(dev develop development staging testing test next main master prod production release lts)
start_dir="${PWD}"

for dir in "${start_dir}"/*/; do
  [[ -d "${dir}/.git" ]] || continue
  repo_name="$(basename "${dir}")"
  log_subheading "Processing: '${repo_name}'"
  cd "${dir}" || { log_error "Failed to cd into '${dir}'"; continue; }

  branch_found=""
  for branch in "${branches[@]}"; do
    if git show-ref --verify --quiet "refs/heads/${branch}"; then
      git checkout "${branch}" >/dev/null 2>&1
      branch_found="${branch}"
      log_message "Checked out '${branch}' in ${repo_name}"
      break
    fi
  done

  if [[ -z "${branch_found}" ]]; then
    log_warning "No known branch found in '${repo_name}'"
    cd "${start_dir}" || exit 1
    continue
  fi

  if git pull origin "${branch_found}"; then
    log_success "Pulled latest for '${repo_name}' (${branch_found})"
  else
    log_failure "Failed to pull for '${repo_name}' (${branch_found})"
  fi

  cd "${start_dir}" || exit 1
done

log_done "All repositories processed."
