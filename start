#!/usr/bin/env bash
# Start AI project development

# Environment setup
# -----------------------------------------------------------------------------
set -o pipefail
[[ ${DEBUG-} ]] && set -o xtrace
SCRIPT_DIR="$(cd "${BASH_SOURCE[0]%/*}" || exit 1; pwd)"
[[ ":${PATH}:" != *:"${SCRIPT_DIR}":* ]] && export PATH="${SCRIPT_DIR}:${PATH}"
source "${SCRIPT_DIR}/bash_modules/terminal.sh"
source "${SCRIPT_DIR}/bash_modules/settings.sh"
source "${SCRIPT_DIR}/bash_modules/utils.sh"
source "${SCRIPT_DIR}/bash_modules/ai.sh"
[[ -z ${BASH_MODULES_DIR-} ]] && echo "ERROR: terminal.sh module missing" && exit 1

function print_usage() {
  cat <<EOF
Usage: $(basename "$0") [--ai <service_class>] [prompt]

Start AI project development

Dependencies:
  claude, gemini, aichat   AI CLI tools

Optional arguments:
  --ai <service_class>  Use specific AI service class (alpha, beta, gamma)
  prompt               Custom prompt to use instead of default file-based prompts
  -h, --help           Show this help message and exit

EOF
}

function format_ai_command_display() {
  local ai_command="$1"

  # Check if command contains single quotes (indicating a long prompt)
  if [[ "${ai_command}" == *\'* ]]; then
    local command_start="${ai_command%%\'*}"
    local command_end="${ai_command##*\'}"
    echo "${command_start}'...'${command_end}"
  else
    echo "${ai_command}"
  fi
}

# Parse arguments
declare ai_service_class=""
declare custom_prompt=""
while [[ $# -gt 0 ]]; do
  case "${1}" in
    -h|--help)
      print_usage
      exit 0
      ;;
    --ai)
      if [[ -z "${2}" ]]; then
        log_error "ERROR: --ai requires a service class argument (alpha, beta, gamma)"
        exit 1
      fi
      ai_service_class="${2}"
      shift 2
      ;;
    -*)
      log_error "ERROR: Unknown option '${1}'"
      print_usage
      exit 1
      ;;
    *)
      if [[ -n "${custom_prompt}" ]]; then
        log_error "ERROR: Only one prompt argument allowed"
        print_usage
        exit 1
      fi
      custom_prompt="${1}"
      shift
      ;;
  esac
done

function ctrlc_trap() {
  log_newline
  log_warning "Script interrupted. Exiting."
  exit 130
}
trap ctrlc_trap SIGINT

# Title and Dependency Checks
# -----------------------------------------------------------------------------
log_title "Starting AI Agent"

# Determine AI service class - default to alpha (claude) for interactive work
declare service_class="alpha"
if [[ -n "${ai_service_class}" ]]; then
  service_class="${ai_service_class}"
fi

declare model_tier
case "${service_class}" in
  alpha)
    model_tier="mid"
    ;;
    beta)
    model_tier="pro"
    ;;
  gamma)
    model_tier="pro"
    ;;
  *)
    model_tier="fast"
    ;;
esac

declare model_tier="mid"
if [[ "${service_class}" == "beta" ]];then
  model_tier="pro"
fi

log_message "Using AI service class: '${service_class}'"

# Main Logic - Exit Early Pattern
# -----------------------------------------------------------------------------

# Handle custom prompt override first
if [[ -n "${custom_prompt}" ]]; then
  log_message "Using custom prompt"
  if [[ -f "ROLE.md" ]]; then
    ai_command=$(ai_get_command "${service_class}" "${model_tier}" ROLE.md "${custom_prompt}")
  else
    ai_command=$(ai_get_command "${service_class}" "${model_tier}" "" "${custom_prompt}")
  fi
  log_message "Executing AI command..."
  log_message "❯ $(format_ai_command_display "${ai_command}")"
  eval "${ai_command}"
  exit 0
fi

# All three files (most specific)
if [[ -f "ROLE.md" && -f "AGENTS.md" && -f "PROJECT.md" ]]; then
  prompt="Read the AGENTS.md file for general understanding, then read the PROJECT.md file and discuss it with me."
  ai_command=$(ai_get_command "${service_class}" "${model_tier}" ROLE.md "${prompt}")
  log_message "Executing AI command..."
  log_message "❯ $(format_ai_command_display "${ai_command}")"
  eval "${ai_command}"
  exit 0
fi

# Two file combinations
if [[ -f "ROLE.md" && -f "PROJECT.md" ]]; then
  prompt="Read the PROJECT.md file and discuss it with me."
  ai_command=$(ai_get_command "${service_class}" "${model_tier}" ROLE.md "${prompt}")
  log_message "Executing AI command..."
  log_message "❯ $(format_ai_command_display "${ai_command}")"
  eval "${ai_command}"
  exit 0
fi

if [[ -f "ROLE.md" && -f "AGENTS.md" ]]; then
  prompt="Read the AGENTS.md file for general understanding, then ask me how you can help."
  ai_command=$(ai_get_command "${service_class}" "${model_tier}" ROLE.md "${prompt}")
  log_message "Executing AI command..."
  log_message "❯ $(format_ai_command_display "${ai_command}")"
  eval "${ai_command}"
  exit 0
fi

if [[ -f "AGENTS.md" && -f "PROJECT.md" ]]; then
  prompt="Read the AGENTS.md file for general understanding, then read the PROJECT.md file and discuss it with me."
  ai_command=$(ai_get_command "${service_class}" "${model_tier}" "" "${prompt}")
  log_message "Executing AI command..."
  log_message "❯ $(format_ai_command_display "${ai_command}")"
  eval "${ai_command}"
  exit 0
fi

# Single file combinations
if [[ -f "ROLE.md" ]]; then
  ai_command=$(ai_get_command "${service_class}" "${model_tier}" ROLE.md)
  log_message "Executing AI command..."
  log_message "❯ $(format_ai_command_display "${ai_command}")"
  eval "${ai_command}"
  exit 0
fi

if [[ -f "PROJECT.md" ]]; then
  prompt="Read the PROJECT.md file and discuss it with me."
  ai_command=$(ai_get_command "${service_class}" "${model_tier}" "" "${prompt}")
  log_message "Executing AI command..."
  log_message "❯ $(format_ai_command_display "${ai_command}")"
  eval "${ai_command}"
  exit 0
fi

if [[ -f "AGENTS.md" ]]; then
  prompt="Read the AGENTS.md file for general understanding, then ask me how you can help."
  ai_command=$(ai_get_command "${service_class}" "${model_tier}" "" "${prompt}")
  log_message "Executing AI command..."
  log_message "❯ $(format_ai_command_display "${ai_command}")"
  eval "${ai_command}"
  exit 0
fi

# No special files - default behavior
ai_command=$(ai_get_command "${service_class}" "${model_tier}")
log_message "Executing AI command..."
log_message "❯ $(format_ai_command_display "${ai_command}")"
eval "${ai_command}"
