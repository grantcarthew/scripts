#!/usr/bin/env bash

# AI Model Configuration Script
# -----------------------------------------------------------------------------
# Interactive script to configure AI model settings for alpha/beta/gamma service classes.
# Models are stored in the settings system for use by the ai.sh module.

# Environment setup
# -----------------------------------------------------------------------------
set -o pipefail
[[ ${DEBUG-} ]] && set -o xtrace
SCRIPT_DIR="$(cd "${BASH_SOURCE[0]%/*}" || exit 1; pwd)"
[[ ":${PATH}:" != *:"${SCRIPT_DIR}":* ]] && export PATH="${SCRIPT_DIR}:${PATH}"
source "${SCRIPT_DIR}/bash_modules/terminal.sh"
[[ -z ${BASH_MODULES_DIR-} ]] && echo "ERROR: terminal.sh module missing" && exit 1
source "${SCRIPT_DIR}/bash_modules/settings.sh"

function print_usage() {
  cat <<EOF
Usage: $(basename "$0")

Interactive configuration script for AI model settings.
Configures models for alpha/beta/gamma service classes and fast/mid/pro tiers.

Dependencies:
  rg                 RipGrep for settings file management

Options:
  -h, --help         Show this help message and exit
EOF
}
if [[ "${1-}" == "-h" || "${1-}" == "--help" ]]; then
  print_usage
  exit 0
fi

function ctrlc_trap() {
  log_newline
  log_warning "Script interrupted. Exiting."
  exit 130
}
trap ctrlc_trap SIGINT

function get_service_name() {
  case "${1}" in
    alpha) echo "claude" ;;
    beta) echo "gemini" ;;
    gamma) echo "aichat" ;;
  esac
}

function validate_model() {
  local service_class="${1}"
  local model="${2}"

  case "${service_class}" in
    alpha)
      if [[ ! "${model}" =~ ^claude- ]]; then
        log_warning "Model '${model}' doesn't look like a Claude model"
        return 1
      fi
      ;;
    beta)
      if [[ ! "${model}" =~ ^gemini- ]]; then
        log_warning "Model '${model}' doesn't look like a Gemini model"
        return 1
      fi
      ;;
    gamma)
      if [[ ! "${model}" =~ ^vertexai: ]]; then
        log_warning "Model '${model}' doesn't look like an aichat model (should start with 'vertexai:')"
        return 1
      fi
      ;;
  esac
  return 0
}

# Title and Dependency Checks
# -----------------------------------------------------------------------------
log_title "AI Model Configuration"

dependencies=(rg)
for cmd in "${dependencies[@]}"; do
  if ! command -v "${cmd}" >/dev/null; then
    log_error "ERROR: Missing dependency - '${cmd}'"
    exit 1
  fi
done

# Main Logic
# -----------------------------------------------------------------------------
log_heading "Current Configuration"

for class in alpha beta gamma; do
  for tier in fast mid pro; do
    key="AI_${class^^}_${tier^^}"
    model="$(settings_get "${key}")"
    printf "%-15s: %s\n" "${class} ${tier}" "${model:-<not set>}" >&2
  done
done
log_newline
log_heading "Service Selection"
log_message "Select service class:"
echo "1) alpha (claude)" >&2
echo "2) beta (gemini)" >&2
echo "3) gamma (aichat)" >&2
read -p "Choice [1-3]: " class_choice

service_class=""
case "${class_choice}" in
  1) service_class="alpha" ;;
  2) service_class="beta" ;;
  3) service_class="gamma" ;;
  *) log_error "Invalid choice"; exit 1 ;;
esac

log_heading "Model Tier Selection"
log_message "Select model tier:"
echo "1) fast" >&2
echo "2) mid" >&2
echo "3) pro" >&2
read -p "Choice [1-3]: " tier_choice

tier=""
case "${tier_choice}" in
  1) tier="fast" ;;
  2) tier="mid" ;;
  3) tier="pro" ;;
  *) log_error "Invalid choice"; exit 1 ;;
esac

# Get current value
key="AI_${service_class^^}_${tier^^}"
current="$(settings_get "${key}")"

log_heading "Model Configuration"
log_message "Configuring: ${service_class} ${tier}"
log_message "Current value: ${current:-<not set>}"
log_message "Service: $(get_service_name "${service_class}")"
log_newline

# Get new model
read -p "Enter new model string: " new_model

if [[ -z "${new_model}" ]]; then
  log_error "Model cannot be empty"
  exit 1
fi

# Validate and save
if validate_model "${service_class}" "${new_model}"; then
  settings_set "${key}" "${new_model}"
  log_success "Saved: ${key}=${new_model}"
else
  log_newline
  read -p "Save anyway? [y/N]: " confirm
  if [[ "${confirm}" =~ ^[Yy] ]]; then
    settings_set "${key}" "${new_model}"
    log_success "Saved: ${key}=${new_model}"
  else
    log_warning "Configuration cancelled"
  fi
fi
