#!/usr/bin/env bash
# Find available scripts and script libraries

# Environment setup
# -----------------------------------------------------------------------------
set -o pipefail # set -o errexit hides errors, don't use it
[[ ${DEBUG-} ]] && set -o xtrace
SCRIPT_DIR="$(cd "${BASH_SOURCE[0]%/*}" || exit 1; pwd)"
[[ ":${PATH}:" != *:"${SCRIPT_DIR}":* ]] && export PATH="${SCRIPT_DIR}:${PATH}"
source "${SCRIPT_DIR}/bash_modules/terminal.sh"
[[ -z ${BASH_MODULES_DIR-} ]] && echo "ERROR: terminal.sh module missing" && exit 1

function print_usage() {
  cat <<EOF
Usage: $(basename "$0") [lib-name]

Find and view documentation for scripts and script libraries.

Without arguments: Lists bash scripts with descriptions, then libraries.
With lib-name: Searches for matching libraries and displays their scripts.

Dependencies:
  fzf                Command-line fuzzy finder
  fd                 Fast directory search tool
  rg                 RipGrep text search tool

Optional arguments:
  lib-name           Library name to inspect
  -h, --help         Show this help message and exit
EOF
}

if [[ $# -gt 1 || "${1}" == "-h" || "${1}" == "--help" ]]; then
  print_usage
  exit 1
fi

function ctrlc_trap() {
  log_newline
  log_warning "Script interrupted. Exiting."
  exit 130
}
trap ctrlc_trap SIGINT

function list_libraries() {
  for dir in "${lib_dir}"/*/; do
    if [[ -d "${dir}" ]]; then
      dir_name=$(basename "${dir}")
      readme_file="${dir}/README.md"

      if [[ -f "${readme_file}" && -r "${readme_file}" ]]; then
        title_line=$(rg -m 1 '^# ' "${readme_file}" 2>/dev/null)
        if [[ -n "${title_line}" ]]; then
          title="${title_line#\# }"
          title="${title%% <!--*}"
          echo "${dir_name}:${title}"
        else
          echo "${dir_name}:No description"
        fi
      else
        echo "${dir_name}:No README.md"
      fi
    fi
  done | sort | column -t -s ':' | sed 's/^/  /'
}

# Title and Dependency Checks
# -----------------------------------------------------------------------------
log_title "Scripts and Libraries"

dependencies=(fzf fd rg)
for cmd in "${dependencies[@]}"; do
    if ! command -v "${cmd}" >/dev/null; then
        log_error "ERROR: Missing dependency - '${cmd}'"
        exit 1
    fi
done

declare lib_name="${1-}"
declare -r lib_dir="${SCRIPT_DIR}/lib"

# Main Logic
# -----------------------------------------------------------------------------
if [[ -z "${lib_name}" ]]; then
  log_heading "Bash Scripts"

  for file in "${SCRIPT_DIR}"/*; do
    if [[ -f "${file}" && ! "${file}" =~ \.(sh|md)$ ]]; then
      if [[ -r "${file}" ]]; then
        first_line=$(head -n 1 "${file}" 2>/dev/null)
        if [[ "${first_line}" =~ \#\!/.*bash ]]; then
          second_line=$(sed -n '2p' "${file}" 2>/dev/null)
          filename=$(basename "${file}")

          if [[ "${second_line}" =~ ^\#[[:space:]]*(.*) ]]; then
            description="${BASH_REMATCH[1]}"
            echo "${filename}:${description}"
          else
            echo "${filename}"
          fi
        fi
      fi
    fi
  done | column -t -s ':' | sed 's/^/  /'

  log_newline
  log_heading "Available Libraries"
  list_libraries
  exit 0
fi

log_heading "Finding '${lib_name}' Library Scripts"

declare -a matching_dirs
mapfile -t matching_dirs < <(find "${lib_dir}" -mindepth 1 -maxdepth 1 -type d -name "*${lib_name}*")

declare selected_dir=""

if [[ "${#matching_dirs[@]}" -eq 0 ]]; then
  log_warning "No libraries found matching: '${lib_name}'"
  log_newline
  log_heading "Available Libraries"
  list_libraries
  exit 0
elif [[ "${#matching_dirs[@]}" -gt 1 ]]; then
  selected_dir=$(printf "%s\n" "${matching_dirs[@]}" | fzf)
else
  selected_dir="${matching_dirs[0]}"
fi

if [[ -z "${selected_dir}" || ! -d "${selected_dir}" ]]; then
  log_error "No library selected or invalid directory."
  exit 1
fi

dir_basename=$(basename "${selected_dir}")
log_subheading "Scripts in '${dir_basename}'"

fd --type f --exclude "*.sh" --exclude "README.md" . "${selected_dir}" --print0 | while IFS= read -r -d $'\0' file; do
  match=$(rg -m 1 -oE 'log_.*title ".*"' "${file}")
  if [[ -n "${match}" ]]; then
    title=$(echo "${match}" | sed -e 's/.*log_.*title \"//' -e 's/\"$//')
    filename=$(basename "${file}")
    echo "${filename}: ${title}"
  fi
done | column -t -s ':' | sed 's/^/  /'
