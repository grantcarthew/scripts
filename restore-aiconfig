#!/usr/bin/env bash
# Restore AI configuration files from ai/config/

# Environment setup
# -----------------------------------------------------------------------------
set -o pipefail
[[ ${DEBUG-} ]] && set -o xtrace
SCRIPT_DIR="$(cd "${BASH_SOURCE[0]%/*}" || exit 1; pwd)"
[[ ":${PATH}:" != *:"${SCRIPT_DIR}":* ]] && export PATH="${SCRIPT_DIR}:${PATH}"
source "${SCRIPT_DIR}/bash_modules/terminal.sh"
[[ -z ${BASH_MODULES_DIR-} ]] && echo "ERROR: terminal.sh module missing" && exit 1

function print_usage() {
  cat <<EOF
Usage: $(basename "$0") [-h|--help]

Restore AI configuration files from ai/config/

This script copies:
  - ai/config/claude-code/settings.json to ~/.claude/
  - ai/commands/ to ~/.claude/commands/
  - ai/config/claude-code/agents/ to ~/.claude/agents/

SAFETY FEATURE:
Before overwriting any existing files or directories, this script creates
a backup in ~/Backup/<yyyy-mm-dd>-restore-config/ to prevent data loss.

Non-existent files or directories are skipped without error.

Optional arguments:
  -h, --help         Show this help message and exit
EOF
}
if [[ "${1-}" == "-h" || "${1-}" == "--help" ]]; then
  print_usage
  exit 0
fi

function ctrlc_trap() {
  log_newline
  log_warning "Script interrupted. Exiting."
  exit 130
}
trap ctrlc_trap SIGINT

# OS Detection
# -----------------------------------------------------------------------------
function get_os_name() {
  if command -v fastfetch >/dev/null 2>&1; then
    local os_name
    os_name="$(fastfetch -l none -s OS | cut -d':' -f2 | xargs | cut -d' ' -f1)"
    echo "${os_name}"
  else
    case "$(uname -s)" in
      Linux)
        echo "Linux"
        ;;
      Darwin)
        echo "macOS"
        ;;
      *)
        echo "Unknown"
        ;;
    esac
  fi
}

# Safety Backup Function
# -----------------------------------------------------------------------------
function safety_backup() {
  local source_path="$1"
  local backup_name="$2"

  if [[ -e "${source_path}" ]]; then
    local backup_path="${SAFETY_BACKUP_DIR}/${backup_name}"
    local backup_dir
    backup_dir="$(dirname "${backup_path}")"

    if ! mkdir -p "${backup_dir}"; then
      log_error "Failed to create backup directory: '${backup_dir}'"
      return 1
    fi

    if [[ -d "${source_path}" ]]; then
      # Directory - use rsync without --delete for additive backup
      if rsync -a "${source_path}/" "${backup_path}/"; then
        log_message "  Backed up directory '${source_path}' to '${backup_path}'"
        return 0
      else
        log_error "Failed to backup directory '${source_path}'"
        return 1
      fi
    else
      # File - use rsync
      if rsync -a "${source_path}" "${backup_path}"; then
        log_message "  Backed up file '${source_path}' to '${backup_path}'"
        return 0
      else
        log_error "Failed to backup file '${source_path}'"
        return 1
      fi
    fi
  fi
  return 0
}

# Title and Setup
# -----------------------------------------------------------------------------
log_title "Configuration Restore"

declare OS_NAME
OS_NAME="$(get_os_name)"
declare -r OS_NAME
declare -r CLAUDE_SOURCE_DIR="${SCRIPT_DIR}/ai/config/claude-code"
declare -r COMMANDS_SOURCE_DIR="${SCRIPT_DIR}/ai/commands"
declare -r CLAUDE_TARGET_DIR="${HOME}/.claude"
declare -r CONFIG_SOURCE_DIR="${SCRIPT_DIR}/ai/config"
declare BACKUP_DATE
BACKUP_DATE="$(date +%Y-%m-%d)"
declare -r BACKUP_DATE
declare -r SAFETY_BACKUP_DIR="${HOME}/Backup/${BACKUP_DATE}-restore-config"

# Create target directories if they don't exist
if ! mkdir -p "${CLAUDE_TARGET_DIR}" "${SAFETY_BACKUP_DIR}"; then
  log_error "Failed to create target directories"
  exit 1
fi

log_heading "Restore Configuration"
log_message "OS Detected: '${OS_NAME}'"
log_message "Config Source: '${CONFIG_SOURCE_DIR}'"
log_message "Claude Source: '${CLAUDE_SOURCE_DIR}'"
log_message "Commands Source: '${COMMANDS_SOURCE_DIR}'"
log_message "Claude Target: '${CLAUDE_TARGET_DIR}'"
log_message "Safety Backup: '${SAFETY_BACKUP_DIR}'"

# Restore settings.json
# -----------------------------------------------------------------------------
log_subheading "Settings File"
if [[ -f "${CLAUDE_SOURCE_DIR}/settings.json" ]]; then
  # Safety backup existing file
  safety_backup "${CLAUDE_TARGET_DIR}/settings.json" "claude-code/settings.json"

  if rsync -a "${CLAUDE_SOURCE_DIR}/settings.json" "${CLAUDE_TARGET_DIR}/"; then
    log_success "settings.json restored"
  else
    log_failure "Failed to restore settings.json"
    exit 1
  fi
else
  log_warning "settings.json not found in backup, skipping"
fi

# Restore commands directory
# -----------------------------------------------------------------------------
log_subheading "Commands Directory"
if [[ -d "${COMMANDS_SOURCE_DIR}" ]]; then
  # Safety backup existing directory
  safety_backup "${CLAUDE_TARGET_DIR}/commands" "claude-code/commands"

  if rsync -a --delete "${COMMANDS_SOURCE_DIR}/" "${CLAUDE_TARGET_DIR}/commands/"; then
    log_success "commands directory restored"
  else
    log_failure "Failed to restore commands directory"
    exit 1
  fi
else
  log_warning "commands directory not found in backup, skipping"
fi

# Restore agents directory
# -----------------------------------------------------------------------------
log_subheading "Agents Directory"
if [[ -d "${CLAUDE_SOURCE_DIR}/agents" ]]; then
  # Safety backup existing directory
  safety_backup "${CLAUDE_TARGET_DIR}/agents" "claude-code/agents"

  if rsync -a --delete "${CLAUDE_SOURCE_DIR}/agents/" "${CLAUDE_TARGET_DIR}/agents/"; then
    log_success "agents directory restored"
  else
    log_failure "Failed to restore agents directory"
    exit 1
  fi
else
  log_warning "agents directory not found in backup, skipping"
fi

log_done "Configuration restore completed"
